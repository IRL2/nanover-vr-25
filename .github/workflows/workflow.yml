name: Actions 😎

on:
  push:
    # `on: push` triggers on pushes to both branches and tags,
    # We do not want to trigger this workflow on tags, especially not on the 'nightly' tag.
    branches:
      - "**"

jobs:
  build:
    name: Build my project ✨
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    concurrency:
      group: needs-license
    steps:
      # Checkout
      - name: Checkout repository ⬇️
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true

      # Cache
      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Build
      - name: Build project 🔨
        uses: game-ci/unity-builder@v4
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneWindows64
          buildName: 'NanoVer iMD'

  artefact-build:
    name: Build my project with artefact ✨
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    concurrency:
      group: needs-license
    steps:
      # Checkout
      - name: Checkout repository ⬇️
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true

      # Cache
      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Build
      - name: Build project 🔨
        uses: game-ci/unity-builder@v4
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneWindows64
          buildName: 'NanoVer iMD'

      # Output
      - uses: actions/upload-artifact@v4
        with:
          name: Build
          path: build

  tests:
    name: Run tests
    runs-on: ubuntu-latest
    concurrency:
      group: needs-license
    steps:
      # Checkout
      - name: Checkout repository ⬇️
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: true

      # Cache
      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Run tests
        uses: game-ci/unity-test-runner@v4
        id: run_tests
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

      - name: Upload test results 📖
        uses: actions/upload-artifact@v4
        if: always() && steps.run_tests.outcome == 'failure'
        with:
          name: Test results
          path: artifacts

  nightly:
    name: Publish the latest Build
    runs-on: ubuntu-latest
    needs: [artefact-build, tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: Build
          path: ./
      - name: Zip windows build
        run: |
          zip -r StandaloneWindows64.zip StandaloneWindows64
      - name: List files
        run: ls -rl
      - name: Update nightly release
        uses: andelf/nightly-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
          name: 'Latest build from the main branch $$'
          draft: false
          prerelease: true
          body: |
            This is the latest build from the main branch.
            It is not an official release. *Use with caution!*
          files:
            ./*.zip

  conda:
    name: Build the conda Packages
    runs-on: windows-latest
    needs: [artefact-build, tests]
    if: github.ref == 'refs/heads/main'
    steps:
      # We need to download the source code to get the version number
      # since we define it from the number of commits.
      # We really only get the history to count commits, no need for LFS content
      # nor for the submodules. However, we need all the commits and not just the last one.
      - name: Checkout repository ⬇️
        uses: actions/checkout@v4
        with:
          lfs: false
          submodules: false
          fetch-depth: 0
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: Build
          path: ./conda/artifacts
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          miniforge-version: latest
      - name: Get version number
        id: set_version
        run: |
          echo "build_number=$(git rev-list --count HEAD)" >> $env:GITHUB_ENV
          echo "frontend_version=0.1.$(git rev-list --count HEAD)" >> $env:GITHUB_ENV
          echo "NARUPA_LICENSE_PATH=$env:GITHUB_WORKSPACE\LICENSE" >> $env:GITHUB_ENV
      - name: Access version number
        id: get_version
        run: |
          echo "build_number: $env:build_number"
          echo "frontend_version: $env:frontend_version"
          echo "NARUPA_LICENSE_PATH: $env:NARUPA_LICENSE_PATH"
      - name: Install dependencies
        run: conda install -y conda-build conda-verify
      - name: Build conda package
        run: |
          ls -R conda
          echo "build_number: $env:build_number"
          echo "frontend_version: $env:frontend_version"
          conda build --numpy 1.11 --no-anaconda-upload --no-test .\conda
      - uses: actions/upload-artifact@v4
        with:
          name: conda-bld
          path: C:\Miniconda3\envs\test\conda-bld

  publish-conda:
    name: Publish the conda package on Anaconda cloud
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: conda
    defaults:
      run:
        # This is necessary for the conda action. It replaces `conda init` as
        # the shell does not load ,profile or .bashrc.
        shell: bash -el {0}
    steps:
      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          # WARNING! On the contrary to all the other places where we install
          # conda, we install miniconda and NOT mi0niforge!
          # This is because we do not need packages to RUN nanover, but packages
          # from the default (anaconda) channel to upload to anaconda.
          miniconda-version: latest
      - name: Retrieve conda packages
        uses: actions/download-artifact@v4
        with:
          name: conda-bld
          path: ./conda-bld
      - run: |
          ls
          ls conda-bld
          ls conda-bld/win-64
      - name: Install Anaconda
        # We temporarilly ignore failure here. See #31.
        run: conda install -y anaconda-client || echo "Fail?"
      - name: Connect to Anaconda cloud
        # The login token may be used by a failed build already. If we are asked
        # if we want it back, we say yes. Hence the echo Y.
        run: echo Y | anaconda login --username irl_bot --password ${{ secrets.ANACONDA_PASSWORD }}
      - name: Upload packages
        # Anaconda will complain if the given version of a package is already
        # there. Until we have some versioning, we force the upload.
        run: anaconda  upload --user irl conda-bld/win-64/nanover-*.conda --force
      - name: Disconnect from Anaconda cloud
        #  Do not fail the build if we cannot logout.
        run: anaconda logout || echo "Could not logout. Too bad."
